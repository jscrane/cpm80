#include <Arduino.h>
#include <keyboard.h>
#include <ps2drv.h>
#include <hardware.h>

#if !defined(USE_OWN_KBD)
#include "kbd.h"
#include "ps2_kbd.h"

// ascii map for scan-codes
static const uint8_t scanmap[] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,	 // 0x00
	0xff, 0xff, 0xff, 0xff, 0xff, 0x09, 0x60, 0xff,	 // 0x08
	0xff, 0xff, 0xff, 0xff, 0xff, 0x71, 0x31, 0xff,	 // 0x10
	0xff, 0xff, 0x7a, 0x73, 0x61, 0x77, 0x32, 0xff,	 // 0x18
	0xff, 0x63, 0x78, 0x64, 0x65, 0x34, 0x33, 0xff,	 // 0x20
	0xff, 0x20, 0x76, 0x66, 0x74, 0x72, 0x35, 0xff,	 // 0x28
	0xff, 0x6e, 0x62, 0x68, 0x67, 0x79, 0x36, 0xff,	 // 0x30
	0xff, 0xff, 0x6d, 0x6a, 0x75, 0x37, 0x38, 0xff,	 // 0x38
	0xff, 0x2c, 0x6b, 0x69, 0x6f, 0x30, 0x39, 0xff,	 // 0x40
	0xff, 0x2e, 0x2f, 0x6c, 0x3b, 0x70, 0x2d, 0xff,	 // 0x48
	0xff, 0xff, 0x27, 0xff, 0x5b, 0x3d, 0xff, 0xff,	 // 0x50
	0xff, 0xff, 0x0d, 0x5d, 0xff, 0x23, 0xff, 0xff,	 // 0x58
	0xff, 0x5c, 0xff, 0xff, 0xff, 0xff, 0x08, 0xff,	 // 0x60
	0xff, 0x31, 0xff, 0x34, 0x37, 0xff, 0xff, 0xff,	 // 0x68
	0x30, 0x7f, 0x32, 0x35, 0x36, 0x38, 0x1b, 0xff,	 // 0x70
	0xff, 0x2b, 0x33, 0x2d, 0x2a, 0x39, 0xff, 0xff,	 // 0x78
};

static const uint8_t shiftmap[] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,	 // 0x00
	0xff, 0xff, 0xff, 0xff, 0xff, 0x09, 0x60, 0xff,	 // 0x08
	0xff, 0xff, 0xff, 0xff, 0xff, 0x51, 0x21, 0xff,	 // 0x10
	0xff, 0xff, 0x5a, 0x53, 0x41, 0x57, 0x22, 0xff,	 // 0x18
	0xff, 0x43, 0x58, 0x44, 0x45, 0x24, 0x23, 0xff,	 // 0x20
	0xff, 0x20, 0x56, 0x46, 0x54, 0x52, 0x25, 0xff,	 // 0x28
	0xff, 0x4e, 0x42, 0x48, 0x47, 0x59, 0x5e, 0xff,	 // 0x30
	0xff, 0xff, 0x4d, 0x4a, 0x55, 0x26, 0x2a, 0xff,	 // 0x38
	0xff, 0x3c, 0x4b, 0x49, 0x4f, 0x29, 0x28, 0xff,	 // 0x40
	0xff, 0x3e, 0x3f, 0x4c, 0x3a, 0x50, 0x5f, 0xff,	 // 0x48
	0xff, 0xff, 0x40, 0xff, 0x7b, 0x2b, 0xff, 0xff,	 // 0x50
	0xff, 0xff, 0x0d, 0x7d, 0xff, 0x7e, 0xff, 0xff,	 // 0x58
	0xff, 0x7c, 0xff, 0xff, 0xff, 0xff, 0x08, 0xff,	 // 0x60
	0xff, 0x31, 0xff, 0x34, 0x37, 0xff, 0xff, 0xff,	 // 0x68
	0x30, 0x7f, 0x32, 0x35, 0x36, 0x38, 0x1b, 0xff,	 // 0x70
	0xff, 0x2b, 0x33, 0x2d, 0x2a, 0x39, 0xff, 0xff,	 // 0x78
};

bool ps2kbd::modifier(unsigned scan, bool is_down) {
	if (!Keyboard::isshift(scan) && !Keyboard::isctrl(scan))
		return false;
	if (Keyboard::isshift(scan))
		_shift = is_down;
	else
		_ctrl = is_down;
	return true;
}

uint8_t ps2kbd::read() {
	for (;;) {
		while (!ps2.available()) {
#if !defined(Energia_h)
			yield();
#endif
		}
		unsigned scan = ps2.read2();
		uint8_t key = scan & 0xff;
		bool down = is_down(scan);
		if (!modifier(key, down) && !down) {
			uint8_t k = (_shift? shiftmap[key]: scanmap[key]);
			if (k != 0xff) {
				if (_ctrl)
					return _shift? k-0x40: k-0x60;
				return k;
			}
		}
	}
}

uint8_t ps2kbd::avail() {
	while (ps2.available()) {
		unsigned scan = ps2.peek();
		uint8_t key = (scan & 0xff);
		bool down = is_down(scan);
		if (modifier(key, down) || !down)
			ps2.read2();
		else
			return 0xff;
	}
	return 0x00;
}

void ps2kbd::reset() {
	_shift = _ctrl = false;
}
#endif
